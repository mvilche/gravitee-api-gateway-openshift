    ##comienzo Template
  apiVersion: v1
  kind: Template
  metadata:
    name: gateway-openshift-mvilche
    labels:
      template: management-api-openshift-mvilche
      autor: "Martin_Fabrizzio_Vilche"
    annotations:
      openshift.io/display-name: "management-api-openshift-mvilche"
      iconClass: "icon-github"
      description: >-
        management-api api gateway INTEGRACION OPENSHIFT
        Martin Fabrizzio Vilche.
        https://github.com/mvilche.

  objects:







########## gateway



  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      finalizers:
      - kubernetes.io/pvc-protection
      name: gravitee-api-gateway-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 20Gi


          
  - apiVersion: v1
    data:
      gravitee.yml: |-
        # -----------------------
        ############################################################################################################
        #################################### Gravitee.IO Gateway - Configuration ###################################
        ############################################################################################################

        ############################################################################################################
        # This file is the general configuration of Gravitee.IO Gateway:
        # - Properties (and respective default values) in comment are provided for information.
        # - You can reference other property by using ${property.name} syntax
        # - gravitee.home property is automatically set-up by launcher and refers to the installation path. Do not override it !
        #
        # Please have a look to http://docs.gravitee.io/ for more options and fine-grained granularity
        ############################################################################################################

        # Gateway HTTP server
        http:
          port: 8082
          host: 0.0.0.0
          idleTimeout: 0
          tcpKeepAlive: true
          compressionSupported: false
          maxHeaderSize: 8192
          maxChunkSize: 8192
          instances: 0
          requestTimeout: 0
          secured: false
          alpn: false
        #  ssl:
        #    clientAuth: false
        #    keystore:
        #      path: ${gravitee.home}/security/keystore.jks
        #      password: secret
        #    truststore:
        #      path: ${gravitee.home}/security/truststore.jks
        #      password: secret
        #  websocket:
        #    enabled: false

        # Plugins repository
        #plugins:
        #  path:
        #    - ${gravitee.home}/plugins
        #    - ${gravitee.home}/my-custom-plugins

        # If a plugin is already installed (but with a different version), management node does not start anymore
        #  failOnDuplicate: true

        # Management repository is used to store global configuration such as APIs, applications, apikeys, ...
        # This is the default configuration using MongoDB (single server)
        # For more information about MongoDB configuration, please have a look to:
        # - http://api.mongodb.org/java/current/com/mongodb/MongoClientOptions.html
        management:
          type: mongodb
          mongodb:
            dbname: ${ds.mongodb.dbname}
            host: ${ds.mongodb.host}
            port: ${ds.mongodb.port}
        #    username:
        #    password:
        #    connectionsPerHost: 0
        #    connectTimeout: 500
        #    maxWaitTime: 120000
        #    socketTimeout: 500
        #    socketKeepAlive: false
        #    maxConnectionLifeTime: 0
        #    maxConnectionIdleTime: 0
        #    serverSelectionTimeout: 0
        #    description: gravitee.io
        #    heartbeatFrequency: 10000
        #    minHeartbeatFrequency: 500
        #    heartbeatConnectTimeout: 1000
        #    heartbeatSocketTimeout: 20000
        #    localThreshold: 15
        #    minConnectionsPerHost: 0
        #    sslEnabled: false
        #    keystore:                   # path to KeyStore (when sslEnabled is true)
        #    keystorePassword:           # KeyStore password
        #    keyPassword:                # password for recovering keys in the KeyStore
        #    threadsAllowedToBlockForConnectionMultiplier: 5
        #    cursorFinalizerEnabled: true
        # possible values are 1,2,3... (the number of node) or 'majority'
        #    writeConcern: 1
        #    wtimeout: 0
        #    journal: true

        # Management repository: single MongoDB using URI
        # For more information about MongoDB configuration using URI, please have a look to:
        # - http://api.mongodb.org/java/current/com/mongodb/MongoClientURI.html
        #management:
        #  type: mongodb
        #  mongodb:
        #    uri: mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]

        # Management repository: clustered MongoDB
        #management:
        #  type: mongodb
        #  mongodb:
        #    servers:
        #      - host: mongo1
        #        port: 27017
        #      - host: mongo2
        #        port: 27017
        #    dbname: ${ds.mongodb.dbname}
        #    connectTimeout: 500
        #    socketTimeout: 250

        # When defining rate-limiting policy, the gateway has to store data to share with other gateway instances.
        # In this example, we are using MongoDB to store counters.
        ratelimit:
          type: mongodb
          mongodb:
            uri: mongodb://${ds.mongodb.host}:${ds.mongodb.port}/${ds.mongodb.dbname}

        cache:
          type: ehcache

        # Reporters configuration (used to store reporting monitoring data, request metrics, healthchecks and others...
        # All reporters are enabled by default. To stop one of them, you have to add the property 'enabled: false'
        reporters:
          # logging configuration
          #logging:
          #  max_size: -1 # max size per API log content respectively : client-request, client-response, proxy-request and proxy-response in MB (-1 means no limit)
          # Elasticsearch reporter
          elasticsearch:
            enabled: true # Is the reporter enabled or not (default to true)
            endpoints:
              - http://${ds.elastic.host}:${ds.elastic.port}
        #    index: gravitee
        #    index_per_type: true
        #    bulk:
        #      actions: 1000           # Number of requests action before flush
        #      flush_interval: 5       # Flush interval in seconds
        #    settings:
        #      number_of_shards: 5
        #      number_of_replicas: 1
        #      refresh_interval: 5s
        #    pipeline:
        #      plugins:
        #        ingest: geoip, user_agent
        #    security:
        #      username: user
        #      password: secret
        #    http:
        #      timeout: 30000 # in milliseconds
        #    template_mapping:
        #      path: ${gravitee.home}/config/reporter/elasticsearch/templates
        #      extended_request_mapping: request.ftl

        # Gateway service configurations. Provided values are default values.
        # All services are enabled by default. To stop one of them, you have to add the property 'enabled: false' (See the
        # 'local' service for an example).
        services:
          core:
            http:
              enabled: true
              port: 18082
              host: 0.0.0.0
              authentication:
                # authentication type to be used for the core services
                # - none : to disable authentication
                # - basic : to use basic authentication
                # default is "basic"
                type: basic
                users:
                  admin: adminadmin

          # Synchronization daemon used to keep the gateway state in sync with the configuration from the management repository
          # Be aware that, by disabling it, the gateway will not be sync with the configuration done through management API
          # and management UI
          sync:
            # Synchronization is done each 5 seconds
            cron: '*/5 * * * * *'

          # Service used to store and cache api-keys from the management repository to avoid direct repository communication
          # while serving requests.
          apikeyscache:
            delay: 10000
            unit: MILLISECONDS
            threads: 3 # Threads core size used to retrieve api-keys from repository.

          # Local registry service.
          # This registry is used to load API Definition with json format from the file system. By doing so, you do not need
          # to configure your API using the web console or the rest API (but you need to know and understand the json descriptor
          # format to make it work....)
          local:
            enabled: false
            path: ${gravitee.home}/apis # The path to API descriptors

          # Gateway monitoring service.
          # This service retrieves metrics like os / process / jvm metrics and send them to an underlying reporting service.
          monitoring:
            delay: 5000
            unit: MILLISECONDS

          # metrics service
          metrics:
            enabled: false
        # default: local, http_method, http_code
        #    labels:
        #      - local
        #      - remote
        #      - http_method
        #      - http_code
        #      - http_path
            prometheus:
              enabled: true

          # heartbeat
        #  heartbeat:
        #    enabled: true
        #    delay: 5000
        #    unit: MILLISECONDS
        #    storeSystemProperties: true

        handlers:
          request:
            transaction:
              header: X-Gravitee-Transaction-Id

        # Referenced properties
        ds:
          mongodb:
            dbname: gravitee
            host: mongo
            port: 27017
          elastic:
            host: elasticsearch
            port: 9200

        # Sharding tags configuration
        # Allows to define inclusion/exclusion sharding tags to only deploy a part of APIs. To exclude just prefix the tag with '!'.
        #tags: products,stocks,!international

        # Multi-tenant configuration
        # Allow only a single-value
        #tenant: europe

        #policy:
        # Customize the api-key header and / or query parameter.
        # Set an empty value to prohibit its use.
        #  api-key:
        #    header: X-Gravitee-Api-Key
        #    param: api-key

        # Gravitee Alert Engine is only available with support
        alerts:
          enabled: false
          default:
            enabled: false
            # must be reachable by other nodes
            cluster:
              host: localhost
              port: 0
              hazelcast:
                config:
                  path: /opt/gateway/config/hazelcast.xml

        #legacy:
        # Enable this parameter if you want the gateway act like version <1.25.11 .
        #  See https://github.com/gravitee-io/issues/issues/2557
        #  decode-url-params: true #you should not need to activate this.
      logback.xml: |-
        <?xml version="1.0" encoding="UTF-8"?>

        <!--
          ~ Copyright (c) 2015-2016, The Gravitee team (http://www.gravitee.io)
          ~
          ~  Licensed under the Apache License, Version 2.0 (the "License");
          ~  you may not use this file except in compliance with the License.
          ~  You may obtain a copy of the License at
          ~
          ~  http://www.apache.org/licenses/LICENSE-2.0
          ~
          ~  Unless required by applicable law or agreed to in writing, software
          ~  distributed under the License is distributed on an "AS IS" BASIS,
          ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          ~  See the License for the specific language governing permissions and
          ~  limitations under the License.
          -->

        <configuration>

            <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
                <!-- encoders are assigned the type
                    ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->
                <encoder>
                    <pattern>%d{HH:mm:ss.SSS} [%thread] [%X{api}] %-5level %logger{36} - %msg%n</pattern>
                </encoder>
            </appender>

            <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <file>${gravitee.home}/logs/gravitee.log</file>
                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <!-- daily rollover -->
                    <fileNamePattern>${gravitee.home}/logs/gravitee_%d{yyyy-MM-dd}.log</fileNamePattern>

                    <!-- keep 30 days' worth of history -->
                    <maxHistory>30</maxHistory>
                </rollingPolicy>

                <encoder>
                    <pattern>%d{HH:mm:ss.SSS} [%thread] [%X{api}] %-5level %logger{36} - %msg%n</pattern>
                </encoder>
            </appender>

            <appender name="async-file" class="ch.qos.logback.classic.AsyncAppender">
                <appender-ref ref="FILE" />
            </appender>

            <appender name="async-console" class="ch.qos.logback.classic.AsyncAppender">
                <appender-ref ref="STDOUT" />
            </appender>

            <logger name="io.gravitee" level="INFO" />
            <logger name="org.reflections" level="WARN" />
            <logger name="org.springframework" level="WARN" />
            <logger name="org.eclipse.jetty" level="WARN" />

            <!-- Strictly speaking, the level attribute is not necessary since -->
            <!-- the level of the root level is set to DEBUG by default.       -->
            <root level="INFO">
                <appender-ref ref="async-console" />
                <appender-ref ref="async-file" />
            </root>

        </configuration>
      ehcache.xml: |-
        <ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="ehcache.xsd">

          <diskStore path="java.io.tmpdir" />

          <cache name="apikey" 
            maxEntriesLocalHeap="10000"
            maxEntriesLocalDisk="1000" 
            eternal="false" 
            diskSpoolBufferSizeMB="20"
            timeToIdleSeconds="0"
            timeToLiveSeconds="0"
            memoryStoreEvictionPolicy="LFU">
          </cache>

          <cache name="subscriptions"
              maxEntriesLocalHeap="10000"
              maxEntriesLocalDisk="1000"
              eternal="false"
              diskSpoolBufferSizeMB="20"
              timeToIdleSeconds="0"
              timeToLiveSeconds="0"
              memoryStoreEvictionPolicy="LFU">
          </cache>

        </ehcache>                     
    kind: ConfigMap
    metadata:
      name: gateway-config




  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: gravitee-api-gateway
      name: gateway
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        app: gravitee-api-gateway
        deploymentconfig: gateway
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            app: gravitee-api-gateway
            deploymentconfig: gateway
        spec:
          containers:
            - env:
                - name: WAITFOR_HOST
                  value: mongo
                - name: WAITFOR_PORT
                  value: '27017'
              image: "gateway:latest"
              imagePullPolicy: Always
              name: gateway
              ports:
                - containerPort: 8082
                  protocol: TCP
                - containerPort: 18082
                  protocol: TCP                                                          
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 120
                periodSeconds: 20
                successThreshold: 1
                httpGet:
                  port: 8082
                  path: /
                timeoutSeconds: 15
              readinessProbe:
                failureThreshold: 3
                initialDelaySeconds: 120
                periodSeconds: 20
                successThreshold: 1
                httpGet:
                  port: 8082
                  path: /
                timeoutSeconds: 15
              resources:
                limits:
                  cpu: 1000m
                  memory: 1024Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - name: gateway-config
                  mountPath: /opt/gateway/config
                - mountPath: /opt/gateway/data
                  name: gateway
                  subPath: gateway                  
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
          volumes:
            - configMap:
                name: gateway-config
              name: gateway-config
            - name: gateway
              persistentVolumeClaim:
                claimName: gravitee-api-gateway-data               
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - gateway
            from:
              kind: ImageStreamTag
              name: "gateway:latest"
          type: ImageChange



  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: gravitee-api-gateway
        build: gateway
      name: gateway
    spec:
      failedBuildsHistoryLimit: 5
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: 'gateway:latest'
      postCommit: {}
      resources: {}
      runPolicy: Serial
      source:
        contextDir: gateway
        git:
          ref: master
          uri: 'https://github.com/mvilche/gravitee-api-gateway-openshift.git'
        type: Git
      strategy:
        dockerStrategy:
          dockerfilePath: Dockerfile
        type: Docker
      successfulBuildsHistoryLimit: 5
      triggers:
        - type: ConfigChange




  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: gravitee-api-gateway
      name: gateway
    spec:
      ports:
        - name: http
          port: 8082
          protocol: TCP
          targetPort: 8082
        - name: admin-http
          port: 18082
          protocol: TCP
          targetPort: 18082                                    
      selector:
        app: gravitee-api-gateway
        deploymentconfig: gateway
      sessionAffinity: None
      type: ClusterIP

  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: gravitee-api-gateway
      name: gateway
    spec:
      host:
      port:
        targetPort: http
      to:
        kind: Service
        name: gateway
        weight: 100
      wildcardPolicy: None       
    

  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: gravitee-api-gateway
      name: gateway
    spec: {}


########## FIN gateway

#### mongo


  - apiVersion: v1
    data:
      mongod.conf: |-
        storage:
          dbPath: /opt/mongodb-data
          journal:
            enabled: true
        net:
          port: 27017
          bindIp: 0.0.0.0 
    kind: ConfigMap
    metadata:
      name: mongo-config


  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: gravitee-api-gateway
      name: mongo
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        app: gravitee-api-gateway
        deploymentconfig: mongo
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        type: Recreate
      template:
        metadata:
          labels:
            app: gravitee-api-gateway
            deploymentconfig: mongo
        spec:
          containers:
            - image: "mongo:latest"
              imagePullPolicy: Always
              command:
              - bash
              - "-c"
              - |
                /opt/mongodb/bin/mongod --config /opt/mongodb-config/mongod.conf              
              name: mongo
              ports:
                - containerPort: 27017
                  protocol: TCP
              livenessProbe:
                exec:
                  command:
                  - bash
                  - "-c"
                  - |
                    nc -z -v -w5 127.0.0.1 27017
                    if [ "$?" == 0 ]; then
                    exit 0
                    else
                    exit 1
                    fi
                initialDelaySeconds: 90
                timeoutSeconds: 5
              readinessProbe:
                exec:
                  command:
                  - bash
                  - "-c"
                  - |
                    nc -z -v -w5 127.0.0.1 27017
                    if [ "$?" == 0 ]; then
                    exit 0
                    else
                    exit 1
                    fi
                initialDelaySeconds: 30
                timeoutSeconds: 15
              resources:
                limits:
                  cpu: 1024m
                  memory: 512Mi                
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
              - name: mongo
                mountPath: /opt/mongodb-data
                subPath: mongodb
              - name: mongo-config
                mountPath: /opt/mongodb-config
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
          volumes:
            - name: mongo
              persistentVolumeClaim:
                claimName: gravitee-api-gateway-data
            - configMap:
                name: mongo-config
              name: mongo-config
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - mongo
            from:
              kind: ImageStreamTag
              name: "mongo:latest"
          type: ImageChange



  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: gravitee-api-gateway
        build: mongo
      name: mongo
    spec:
      failedBuildsHistoryLimit: 5
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: 'mongo:latest'
      postCommit: {}
      resources: {}
      runPolicy: Serial
      source:
        contextDir: mongo
        git:
          ref: master
          uri: 'https://github.com/mvilche/gravitee-api-gateway-openshift.git'
        type: Git
      strategy:
        dockerStrategy:
          dockerfilePath: Dockerfile
        type: Docker
      successfulBuildsHistoryLimit: 5
      triggers:
        - type: ConfigChange




  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: gravitee-api-gateway
      name: mongo
    spec:
      ports:
        - name: client
          port: 27017
          protocol: TCP
          targetPort: 27017                             
      selector:
        app: gravitee-api-gateway
        deploymentconfig: mongo
      sessionAffinity: None
      type: ClusterIP

    

  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: gravitee-api-gateway
      name: mongo
    spec: {}

### fin mongo


#### comienzo api admin


  - apiVersion: v1
    data:
      gravitee.yml: |-
        ############################################################################################################
        ################################ Gravitee.IO Management API - Configuration ################################
        ############################################################################################################

        ############################################################################################################
        # This file is the general configuration of Gravitee.IO Management API:
        # - Properties (and respective default values) in comment are provided for information.
        # - You can reference other property by using ${property.name} syntax
        # - gravitee.home property is automatically set-up by launcher and refers to the installation path. Do not override it !
        #
        # Please have a look to http://docs.gravitee.io/ for more options and fine-grained granularity
        ############################################################################################################

        # HTTP Server
        jetty:
        #  IP/hostname to bind to. Default is 0.0.0.0
          host: 0.0.0.0
          port: 8083
          idleTimeout: 30000
          acceptors: -1
          selectors: -1
          pool:
            minThreads: 10
            maxThreads: 200
            idleTimeout: 60000
            queueSize: 6000
          jmx: false
          statistics: false
          accesslog:
            enabled: true
            path: ${gravitee.home}/logs/gravitee_accesslog_yyyy_mm_dd.log
          secured: false
        #  ssl:
        #    keystore:
        #      path: ${gravitee.home}/security/keystore.jks
        #      password: secret
        #    truststore:
        #      path: ${gravitee.home}/security/truststore.jks
        #      password: secret

        http:
          api:
            # Configure the listening path for the API. Default to /management
            #entrypoint: /management
          cors:
            # Allows to configure the header Access-Control-Allow-Origin (default value: *)
            # '*' is a valid value but is considered as a security risk as it will be opened to cross origin requests from anywhere.
            #allow-origin: http://developer.mycompany.com
            # Allows to define how long the result of the preflight request should be cached for (default value; 1728000 [20 days])
            #max-age: 864000
            # Which methods to allow (default value: OPTIONS, GET, POST, PUT, DELETE)
            #allow-methods: 'OPTIONS, GET, POST, PUT, DELETE'
            # Which headers to allow (default values: Cache-Control, Pragma, Origin, Authorization, Content-Type, X-Requested-With, If-Match)
            #allow-headers: 'X-Requested-With'
          hsts:
            enabled: true
            include-sub-domains: true
            max-age: 31536000

        # Plugins repository
        #plugins:
        #  path:
        #    - ${gravitee.home}/plugins
        #    - ${gravitee.home}/my-custom-plugins
        # If a external is already installed (but with a different version), management node does not start anymore
        #  failOnDuplicate: true

        # Management repository is used to store global configuration such as APIs, applications, apikeys, ...
        # This is the default configuration using MongoDB (single server)
        # For more information about MongoDB configuration, please have a look to:
        # - http://api.mongodb.org/java/current/com/mongodb/MongoClientOptions.html
        management:
          type: mongodb
          mongodb:
            dbname: ${ds.mongodb.dbname}
            host: ${ds.mongodb.host}
            port: ${ds.mongodb.port}
        #    username:
        #    password:
        #    connectionsPerHost: 0
        #    connectTimeout: 500
        #    maxWaitTime: 120000
        #    socketTimeout: 500
        #    socketKeepAlive: false
        #    maxConnectionLifeTime: 0
        #    maxConnectionIdleTime: 0
        #    serverSelectionTimeout: 0
        #    description: gravitee.io
        #    heartbeatFrequency: 10000
        #    minHeartbeatFrequency: 500
        #    heartbeatConnectTimeout: 1000
        #    heartbeatSocketTimeout: 20000
        #    localThreshold: 15
        #    minConnectionsPerHost: 0
        #    sslEnabled: false
        #    threadsAllowedToBlockForConnectionMultiplier: 5
        #    cursorFinalizerEnabled: true
        # possible values are 1,2,3... (the number of node) or 'majority'
        #    writeConcern: 1
        #    wtimeout: 0
        #    journal: true

        # Management repository: single MongoDB using URI
        # For more information about MongoDB configuration using URI, please have a look to:
        # - http://api.mongodb.org/java/current/com/mongodb/MongoClientURI.html
        #management:
        #  type: mongodb
        #  mongodb:
        #    uri: mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]

        # Management repository: clustered MongoDB
        #management:
        #  type: mongodb
        #  mongodb:
        #    servers:
        #      - host: mongo1
        #        port: 27017
        #      - host: mongo2
        #        port: 27017
        #    dbname: ${ds.mongodb.dbname}
        #    connectTimeout: 500
        #    socketTimeout: 250

        services:
          core:
            http:
              enabled: true
              port: 18083
              host: 0.0.0.0
              authentication:
                # authentication type to be used for the core services
                # - none : to disable authentication
                # - basic : to use basic authentication
                # default is "basic"
                type: basic
                users:
                  admin: adminadmin

          # metrics service
          metrics:
            enabled: false
            prometheus:
              enabled: true

        # Analytics repository is used to store all reporting, metrics, health-checks stored by gateway instances
        # This is the default configuration using Elasticsearch
        analytics:
          type: elasticsearch
          elasticsearch:
            endpoints:
              - http://${ds.elastic.host}:${ds.elastic.port}
        #    index: gravitee
        #    index_per_type: true
        #    cross_cluster:
        #      mapping:
        #        tenant_id: cluster_name
        #        tenant_id: cluster_name
        #    security:
        #      username: user
        #      password: secret
        #    http:
        #      timeout: 10000 # in milliseconds
        #

        # Authentication and identity sources
        # Users can have following roles (authorities):
        #  USER: Can access portal and be a member of an API
        #  API_PUBLISHER: Can create and manage APIs
        #  API_CONSUMER: Can create and manage Applications
        #  ADMIN: Can manage global system
        security:
          # When using an authentication providers, use trustAll mode for TLS connections
          # trustAll: false
          providers:  # authentication providers
            - type: memory
              # allow search results to display the user email. Be careful, It may be contrary to the user privacy.
        #      allow-email-in-search-results: true
              # password encoding/hashing algorithm. One of:
              # - bcrypt : passwords are hashed with bcrypt (supports only $2a$ algorithm)
              # - none : passwords are not hashed/encrypted
              # default value is bcrypt
              password-encoding-algo: bcrypt
              users:
                - user:
                  username: user
                  # Passwords are encoded using BCrypt
                  # Password value: password
                  password: $2a$10$9kjw/SH9gucCId3Lnt6EmuFreUAcXSZgpvAYuW2ISv7hSOhHRH1AO
                  roles: MANAGEMENT:USER, PORTAL:USER
                - user:
                  username: admin
                  # Password value: admin
                  password: $2a$10$Ihk05VSds5rUSgMdsMVi9OKMIx2yUvMz7y9VP3rJmQeizZLrhLMyq
                  roles: MANAGEMENT:ADMIN, PORTAL:ADMIN
                - user:
                  username: api1
                  # Password value: api1
                  password: $2a$10$iXdXO4wAYdhx2LOwijsp7.PsoAZQ05zEdHxbriIYCbtyo.y32LTji
                  # You can declare multiple roles using comma separator
                  roles: MANAGEMENT:API_PUBLISHER, PORTAL:API_PUBLISHER
                - user:
                  username: application1
                  # Password value: application1
                  password: $2a$10$2gtKPYRB9zaVaPcn5RBx/.3T.7SeZoDGs9GKqbo9G64fKyXFR1He.
                  roles: MANAGEMENT:USER, PORTAL:USER
            # Enable authentication using internal repository
            - type: gravitee
              # allow search results to display the user email. Be careful, It may be contrary to the user privacy.
        #      allow-email-in-search-results: true
            # Enable authentication using an LDAP/Active Directory
        #    - type: ldap
              # This is default LDAP configuration for ApacheDS
        #      context:
        #        username: "uid=admin,ou=system"
        #        password: "secret"
        #        url: "ldap://localhost:10389/c=io,o=gravitee"
        #        base: "c=io,o=gravitee" # the context source base
        #      authentication:
        #        user:
                  # Search base for user authentication. Defaults to "". Only used with user filter.
                  # It should be relative to the Base DN. If the whole DN is o=user accounts,c=io,o=gravitee then the base should be like this:
        #          base: "o=user accounts"
                  # The LDAP filter used to search for user during authentication. For example "(uid={0})". The substituted parameter is the user's login name.
        #          filter: "mail={0}"
                  # Specifies the attribute name which contains the user photo (URL or binary)
        #          photo-attribute: "jpegPhoto"
        #        group:
                  # Search base for groups searches. Defaults to "". Only used with group filter.
                  # It should be relative to the Base DN. If the whole DN is o=authorization groups,c=io,o=gravitee then the base should be like this:
        #          base: "o=authorization groups"
        #          filter: "member={0}"
        #          role:
        #            attribute: "cn"
        #            mapper: {
        #              GRAVITEE-CONSUMERS: API_CONSUMER,
        #              GRAVITEE-PUBLISHERS: API_PUBLISHER,
        #              GRAVITEE-ADMINS: ADMIN,
        #              GRAVITEE-USERS: USER
        #            }
        #      lookup:
                # allow search results to display the user email. Be careful, It may be contrary to the user privacy.
        #         allow-email-in-search-results: true
        #        user:
                  # Search base for user searches. Defaults to "". Only used with user filter.
                  # It should be relative to the Base DN. If the whole DN is o=user accounts,c=io,o=gravitee then the base should be like this:
        #          base: "o=user accounts"
                  # The LDAP filter used to search for user during authentication. For example "(uid={0})". The substituted parameter is the user's login name.
        #          filter: "(&(objectClass=Person)(|(cn=*{0}*)(uid={0})))"

        # SMTP configuration used to send mails
        email:
          enabled: false
          host: smtp.my.domain
          subject: "[Gravitee.io] %s"
          port: 587
          from: noreply@my.domain
          username: user@my.domain
          password: password
        #  properties:
        #    auth: true
        #    starttls.enable: true
        #    ssl.trust: smtp.gmail.com

        # Mail templates
        #templates:
        #  path: ${gravitee.home}/templates

        # Referenced properties
        ds:
          mongodb:
            dbname: gravitee
            host: mongo
            port: 27017
          elastic:
            host: elasticsearch
            port: 9200

        jwt:
          secret: myJWT4Gr4v1t33_S3cr3t
          # Allows to define the end of validity of the token in seconds (default 604800 = a week)
          #expire-after: 604800
          # Allows to define the end of validity of the token in seconds for email registration (default 86400 = a day)
          #email-registration-expire-after: 86400
          # Allows to define issuer (default gravitee-management-auth)
          #issuer: gravitee-management-auth
          # Allows to define cookie context path (default /)
          #cookie-path: /
          # Allows to define cookie domain (default "")
          #cookie-domain: .gravitee.io
          # Allows to define if cookie secure only (default false)
          #cookie-secure: true

        swagger:
          # Default scheme used when creating an API from a Swagger descriptor if there is no scheme specified.
          scheme: https

        user:
          login:
            # Create a default application when user connects to the portal for the very first time (default true)
            #defaultApplication: true
          creation:
            token:
              #expire-after: 86400
          reference:
              # Secret key used to generate reference of a user which is unique (default: s3cR3t4grAv1t33.1Ous3D4R3f3r3nc3)
              # Must contains 32 chars (256 bits)
              #secret:
          anonymize-on-delete:
            #enabled: true

        # The portal URL used in emails
        portalURL: http://localhost:3000/

        search:
          data: /opt/management/data

        # global configuration of the http client
        #httpClient:
        #  timeout: 10000 # in milliseconds
        #  proxy:
        #    type: HTML #HTTP, SOCK4, SOCK5
        #    http:
        #      host: localhost
        #      port: 3128
        #      username: user
        #      password: secret
        #    https:
        #      host: localhost
        #      port: 3128
        #      username: user
        #      password: secret

        notifiers:
          email:
            enabled: true
            host: ${email.host}
            subject: ${email.subject}
            port: ${email.port}
            from: ${email.from}
            username: ${email.username}
            password: ${email.password}
        #    starttls.enabled: false
        #    ssl:
        #      trustAll: false
        #      keyStore:
        #      keyStorePassword:

        # Gravitee Alert Engine is only available with support
        alerts:
          enabled: false
          default:
            enabled: false
            # must be reachable by other nodes
            cluster:
              host: localhost
              port: 0
              hazelcast:
                config:
                  path: ${gravitee.home}/config/hazelcast.xml
      logback.xml: |-
        <?xml version="1.0" encoding="UTF-8"?>

        <!--
          ~ Copyright (c) 2015-2016, The Gravitee team (http://www.gravitee.io)
          ~
          ~  Licensed under the Apache License, Version 2.0 (the "License");
          ~  you may not use this file except in compliance with the License.
          ~  You may obtain a copy of the License at
          ~
          ~  http://www.apache.org/licenses/LICENSE-2.0
          ~
          ~  Unless required by applicable law or agreed to in writing, software
          ~  distributed under the License is distributed on an "AS IS" BASIS,
          ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          ~  See the License for the specific language governing permissions and
          ~  limitations under the License.
          -->

        <configuration>

            <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
                <!-- encoders are assigned the type
                    ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->
                <encoder>
                    <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
                </encoder>
            </appender>

            <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <file>${gravitee.home}/logs/gravitee.log</file>
                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <!-- daily rollover -->
                    <fileNamePattern>${gravitee.home}/logs/gravitee_%d{yyyy-MM-dd}.log</fileNamePattern>

                    <!-- keep 30 days' worth of history -->
                    <maxHistory>30</maxHistory>
                </rollingPolicy>

                <encoder>
                    <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
                </encoder>
            </appender>

            <logger name="io.gravitee" level="INFO" />
            <logger name="org.eclipse.jetty" level="INFO" />

            <!-- Strictly speaking, the level attribute is not necessary since -->
            <!-- the level of the root level is set to DEBUG by default.       -->
            <root level="WARN">
                <appender-ref ref="STDOUT" />
                <appender-ref ref="FILE" />
            </root>

        </configuration>
    kind: ConfigMap
    metadata:
      name: management-api-config



  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: gravitee-api-gateway
      name: management-api
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        app: gravitee-api-gateway
        deploymentconfig: management-api
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            app: gravitee-api-gateway
            deploymentconfig: management-api
        spec:
          containers:
            - env:
                - name: WAITFOR_HOST
                  value: mongo
                - name: WAITFOR_PORT
                  value: '27017'
              image: "management-api:latest"
              imagePullPolicy: Always
              name: management-api
              ports:
                - containerPort: 8083
                  protocol: TCP                                         
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 120
                periodSeconds: 20
                successThreshold: 1
                httpGet:
                  port: 8083
                  path: /
                timeoutSeconds: 15
              readinessProbe:
                failureThreshold: 3
                initialDelaySeconds: 120
                periodSeconds: 20
                successThreshold: 1
                httpGet:
                  port: 8083
                  path: /
                timeoutSeconds: 15
              resources:
                limits:
                  cpu: 1000m
                  memory: 2048Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /opt/management/config
                  name: management-api-config
                - mountPath: /opt/management/data
                  name: management-api
                  subPath: management-api                  
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
          volumes:
            - configMap:
                name: management-api-config
              name: management-api-config
            - name: management-api
              persistentVolumeClaim:
                claimName: gravitee-api-gateway-data              
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - management-api
            from:
              kind: ImageStreamTag
              name: "management-api:latest"
          type: ImageChange



  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: gravitee-api-gateway
        build: management-api
      name: management-api
    spec:
      failedBuildsHistoryLimit: 5
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: 'management-api:latest'
      postCommit: {}
      resources: {}
      runPolicy: Serial
      source:
        contextDir: management-api
        git:
          ref: master
          uri: 'https://github.com/mvilche/gravitee-api-gateway-openshift.git'
        type: Git
      strategy:
        dockerStrategy:
          dockerfilePath: Dockerfile
        type: Docker
      successfulBuildsHistoryLimit: 5
      triggers:
        - type: ConfigChange


  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: gravitee-api-gateway
      name: management-api
    spec:
      host:
      port:
        targetPort: http
      to:
        kind: Service
        name: management-api
        weight: 100
      wildcardPolicy: None        


  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: gravitee-api-gateway
      name: management-api
    spec:
      ports:
        - name: http
          port: 8083
          protocol: TCP
          targetPort: 8083
        - name: http-admin
          port: 18083
          protocol: TCP
          targetPort: 18083                                     
      selector:
        app: gravitee-api-gateway
        deploymentconfig: management-api
      sessionAffinity: None
      type: ClusterIP

    

  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: gravitee-api-gateway
      name: management-api
    spec: {}


### fin admin

### start portal

  - apiVersion: v1
    data:
      constants.json: |-
        {
          "baseURL": "http://management-api/management/"
        }
    kind: ConfigMap
    metadata:
      name: management-ui-config


  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: gravitee-api-gateway
      name: management-ui
    spec:
      host:
      port:
        targetPort: http
      to:
        kind: Service
        name: management-ui
        weight: 100
      wildcardPolicy: None    

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: gravitee-api-gateway
      name: management-ui
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        app: gravitee-api-gateway
        deploymentconfig: management-ui
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            app: gravitee-api-gateway
            deploymentconfig: management-ui
        spec:
          containers:
            - image: "management-ui:latest"
              imagePullPolicy: Always
              name: management-ui
              ports:
                - containerPort: 6379
                  protocol: TCP
              resources:
                limits:
                  cpu: 500m
                  memory: 256Mi
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 60
                periodSeconds: 20
                successThreshold: 1
                httpGet:
                  port: 8080
                  path: /
                timeoutSeconds: 15
              readinessProbe:
                failureThreshold: 3
                initialDelaySeconds: 60
                periodSeconds: 20
                successThreshold: 1
                httpGet:
                  port: 8080
                  path: /
                timeoutSeconds: 15                             
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /opt/config
                  name: management-ui-config                                             
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
          volumes:
            - configMap:
                name: management-ui-config
              name: management-ui-config          
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - management-ui
            from:
              kind: ImageStreamTag
              name: "management-ui:latest"
          type: ImageChange


  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: gravitee-api-gateway
      name: management-ui
    spec:
      ports:
        - name: http
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        app: gravitee-api-gateway
        deploymentconfig: management-ui
      sessionAffinity: None
      type: ClusterIP


  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: gravitee-api-gateway
        build: management-ui
      name: management-ui
    spec:
      failedBuildsHistoryLimit: 5
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: 'management-ui:latest'
      postCommit: {}
      resources: {}
      runPolicy: Serial
      source:
        contextDir: management-ui
        git:
          ref: master
          uri: 'https://github.com/mvilche/gravitee-api-gateway-openshift.git'
        type: Git
      strategy:
        dockerStrategy:
          dockerfilePath: Dockerfile
        type: Docker
      successfulBuildsHistoryLimit: 5
      triggers:
        - type: ConfigChange

  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: gravitee-api-gateway
      name: management-ui
    spec: {}



    ### elasticsearch


### COMIENZO elasticsearch
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: gravitee-api-gateway
      name: elasticsearch
    spec:
      replicas: 1
      selector:
        app: gravitee-api-gateway
        deploymentconfig: elasticsearch
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        type: Recreate
      template:
        metadata:
          labels:
            app: gravitee-api-gateway
            deploymentconfig: elasticsearch
        spec:
          containers:
            - env:
                - name: discovery.type
                  value: single-node
                - name: ES_JAVA_OPTS
                  value: -Xmx1024m -Xms1024m
              image: elasticsearch:7.4.2
              imagePullPolicy: Always
              name: elasticsearch
              ports:
                - containerPort: 9200
                  protocol: TCP
                - containerPort: 9300
                  protocol: TCP                  
              livenessProbe:
                exec:
                  command:
                  - bash
                  - "-c"
                  - |
                    nc -z -v -w5 127.0.0.1 9200
                    if [ "$?" == 0 ]; then
                    exit 0
                    else
                    exit 1
                    fi
                initialDelaySeconds: 90
                timeoutSeconds: 5
              readinessProbe:
                exec:
                  command:
                  - bash
                  - "-c"
                  - |
                    nc -z -v -w5 127.0.0.1 9200
                    if [ "$?" == 0 ]; then
                    exit 0
                    else
                    exit 1
                    fi
                initialDelaySeconds: 30
                timeoutSeconds: 15
              resources:
                limits:
                  memory: 2048Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /usr/share/elasticsearch/data
                  name: elasticsearch
                  subPath: elasticsearch
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
            - name: elasticsearch
              persistentVolumeClaim:
                claimName: gravitee-api-gateway-data
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - elasticsearch
            from:
              kind: ImageStreamTag
              name: 'elasticsearch:7.4.2'
          type: ImageChange



  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: gravitee-api-gateway
      name: elasticsearch
    spec:
      ports:
        - name: tcp
          port: 9200
          protocol: TCP
          targetPort: 9200
        - name: tcp2
          port: 9300
          protocol: TCP
          targetPort: 9300          
      selector:
        app: gravitee-api-gateway
        deploymentconfig: elasticsearch
      sessionAffinity: None
      type: ClusterIP



  - apiVersion: v1
    kind: ImageStream
    metadata:
        name: elasticsearch
    spec:
        tags:
          - name: '7.4.2'
            from:
                kind: DockerImage
                name: docker.elastic.co/elasticsearch/elasticsearch:7.4.2


###### FIN elasticsearch
    

